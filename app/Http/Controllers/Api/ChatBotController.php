<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Sach;
use App\Models\TacGia;
use App\Models\DanhMuc;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Carbon;
use App\Models\KhuyenMai; // Assuming you have a KhuyenMai model for promotions

class ChatBotController extends Controller
{
    public function handle(Request $request)
    {
        $text = $request->input('queryInput.text.text');
        if (!$text) {
            return response()->json(['fulfillmentText' => 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi.']);
        }

        Log::info('Ng∆∞·ªùi d√πng h·ªèi:', [$text]);

        // ===== 1. T√¨m theo t√°c gi·∫£ =====
        $tacgiaList = TacGia::all();
        foreach ($tacgiaList as $tg) {
            if (Str::contains(Str::lower($text), Str::lower($tg->tenTG))) {
                $sach = Sach::where('maTG', $tg->maTG)->pluck('tenSach');
                if ($sach->isEmpty()) {
                    return response()->json([
                        'fulfillmentText' => 'Kh√¥ng t√¨m th·∫•y s√°ch n√†o c·ªßa ' . $tg->tenTG . '.'
                    ]);
                }
                return response()->json([
                    'fulfillmentText' => 'C√°c s√°ch c·ªßa ' . $tg->tenTG . ': ' . $sach->join(', ')
                ]);
            }
        }

        // ===== 2. T√¨m theo danh m·ª•c (th·ªÉ lo·∫°i) =====
        $danhMucList = DanhMuc::all();
        foreach ($danhMucList as $dm) {
            if (Str::contains(Str::lower($text), Str::lower($dm->tenDM))) {
                $sach = Sach::where('maDM', $dm->maDM)->pluck('tenSach');
                if ($sach->isEmpty()) {
                    return response()->json([
                        'fulfillmentText' => "Kh√¥ng t√¨m th·∫•y s√°ch thu·ªôc th·ªÉ lo·∫°i {$dm->tenDM}."
                    ]);
                }
                return response()->json([
                    'fulfillmentText' => "Hi·ªán BookNest ƒëang c√≥ m·ªôt s·ªë s√°ch thu·ªôc th·ªÉ lo·∫°i {$dm->tenDM} l√† " . $sach->join(', ')
                ]);
            }
        }

        // ===== 3. T√¨m theo t·ª´ kh√≥a trong t√™n s√°ch =====
        if (Str::contains(Str::lower($text), 's√°ch') && Str::contains(Str::lower($text), 't√™n')) {
            preg_match('/t√™n (.+)/i', $text, $matches);
            $keyword = $matches[1] ?? null;
            if ($keyword) {
                $sach = Sach::where('tenSach', 'like', '%' . $keyword . '%')->pluck('tenSach');
                if ($sach->isEmpty()) {
                    return response()->json([
                        'fulfillmentText' => "Kh√¥ng t√¨m th·∫•y s√°ch n√†o c√≥ t·ª´ '$keyword' trong t√™n."
                    ]);
                }
                return response()->json([
                    'fulfillmentText' => "C√°c s√°ch c√≥ ch·ªØ '$keyword' trong t√™n: " . $sach->join(', ')
                ]);
            }
            return response()->json([
                'fulfillmentText' => 'B·∫°n mu·ªën t√¨m s√°ch c√≥ t·ª´ n√†o trong t√™n?'
            ]);
        }
        // ===== 4. Xin ch√†o, Hello =====
        if (preg_match('/^(xin ch√†o|hello|hi|ch√†o|yo)/i', $text)) {
            return response()->json([
                'fulfillmentText' => 'Ch√†o b·∫°n üëã M√¨nh l√† chatbot c·ªßa BookNest! B·∫°n mu·ªën t√¨m s√°ch theo t√°c gi·∫£, th·ªÉ lo·∫°i hay h·ªèi v·ªÅ ƒë·∫∑t h√†ng n√®?'
            ]);
        }

        // ===== 5. Ph∆∞∆°ng th·ª©c thanh to√°n =====
        if (Str::contains(Str::lower($text), 'thanh to√°n') || Str::contains(Str::lower($text), 'tr·∫£ ti·ªÅn')) {
            return response()->json([
                'fulfillmentText' => 'B·∫°n c√≥ th·ªÉ thanh to√°n qua c√°c ph∆∞∆°ng th·ª©c: COD (tr·∫£ ti·ªÅn khi nh·∫≠n h√†ng), v√≠ Momo ho·∫∑c chuy·ªÉn kho·∫£n ng√¢n h√†ng nh√©.'
            ]);
        }

        // ===== 6. Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn / giao h√†ng =====
        if (
            Str::contains(Str::lower($text), 'v·∫≠n chuy·ªÉn') ||
            Str::contains(Str::lower($text), 'giao h√†ng') ||
            Str::contains(Str::lower($text), 'ship')
        ) {
            return response()->json([
                'fulfillmentText' => 'BookNest h·ªó tr·ª£ giao h√†ng to√†n qu·ªëc th√¥ng qua ƒë·ªëi t√°c nh∆∞ GHTK, J&T, Viettel Post... Giao nhanh t·ª´ 2‚Äì5 ng√†y t√πy khu v·ª±c nha!'
            ]);
        }

        // ===== 7. H·ªèi gi√° s√°ch =====
        if (Str::contains(Str::lower($text), 'gi√°') && Str::contains(Str::lower($text), 's√°ch')) {
            $sachList = Sach::all();
            foreach ($sachList as $s) {
                if (Str::contains(Str::lower($text), Str::lower($s->tenSach))) {
                    $gia = number_format($s->giaGoc, 0, ',', '.') . 'ƒë';
                    return response()->json([
                        'fulfillmentText' => "Gi√° c·ªßa s√°ch \"{$s->tenSach}\" l√† $gia."
                    ]);
                }
            }
            return response()->json([
                'fulfillmentText' => 'B·∫°n mu·ªën h·ªèi gi√° s√°ch n√†o nh·ªâ?'
            ]);
        }

        // ===== 8. H·ªèi v·ªÅ khuy·∫øn m√£i hi·ªán t·∫°i =====
        if (
            Str::contains(Str::lower($text), 'khuy·∫øn m√£i') ||
            Str::contains(Str::lower($text), 'khuy·∫øn m·∫°i') ||
            Str::contains(Str::lower($text), 'gi·∫£m gi√°') ||
            Str::contains(Str::lower($text), 'sale')
        ) {
            $now = Carbon::now();
            $km = KhuyenMai::where('batDau', '<=', $now)
                ->where('ketThuc', '>=', $now)
                ->get();

            if ($km->isEmpty()) {
                return response()->json([
                    'fulfillmentText' => 'Hi·ªán t·∫°i kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i n√†o ƒëang di·ªÖn ra.'
                ]);
            }

            $info = $km->map(fn($k) => "{$k->tenKM} ({$k->giaTri}% {$k->loaiGiam}) ƒë·∫øn {$k->ketThuc->format('d/m')}")->join('; ');
            return response()->json([
                'fulfillmentText' => "C√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán c√≥: $info"
            ]);
        }

        // ===== M·∫∑c ƒë·ªãnh =====
        return response()->json([
            'fulfillmentText' => 'Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu y√™u c·∫ßu. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ t√™n s√°ch, th·ªÉ lo·∫°i ho·∫∑c t√°c gi·∫£ nha!'
        ]);
    }
}
